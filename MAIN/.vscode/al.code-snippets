{
    "Install Codeunit": {
        "scope": "al",
        "prefix": "tinstallcodeunit (TNC)",
        "body": [
            "codeunit ${1:50098} Install${2:Ext}",
            "{",
            "    Subtype = Install;",
            "",
            "    trigger OnInstallAppPerCompany()",
            "    var",
            "        AppInfo: ModuleInfo;",
            "    begin",
            "        NavApp.GetCurrentModuleInfo(AppInfo);",
            "        if AppInfo.DataVersion() = Version.Create(0, 0, 0, 0) then",
            "            HandleFreshInstallPerCompany()",
            "        else",
            "            HandleReinstallPerCompany();",
            "    end;",
            "",
            "    trigger OnInstallAppPerDatabase()",
            "    var",
            "        AppInfo: ModuleInfo;",
            "    begin",
            "        NavApp.GetCurrentModuleInfo(AppInfo);",
            "        if AppInfo.DataVersion() = Version.Create(0, 0, 0, 0) then",
            "            HandleFreshInstallPerDatabase()",
            "        else",
            "            HandleReinstallPerDatabase();",
            "    end;",
            "",
            "    local procedure HandleFreshInstallPerCompany();",
            "    begin",
            "        // Do work needed the first time this extension is ever installed for this company.",
            "        // Some possible usages:",
            "        // - Initial data setup for use",
            "    end;",
            "",
            "    local procedure HandleReinstallPerCompany();",
            "    begin",
            "        // Do work needed when reinstalling the same version of this extension back on this company.",
            "        // Some possible usages:",
            "        // - Data 'patchup' work, for example, detecting if new 'base' records have been changed while you have been working 'offline'.",
            "        // - Setup 'welcome back' messaging for next user access.",
            "    end;",
            "",
            "    local procedure HandleFreshInstallPerDatabase();",
            "    begin",
            "        // Do work needed the first time this extension is ever installed for this tenant.",
            "        // Some possible usages:",
            "        // - Service callback/telemetry indicating that extension was install",
            "    end;",
            "",
            "    local procedure HandleReinstallPerDatabase();",
            "    begin",
            "        // Do work needed when reinstalling the same version of this extension back on this tenant.",
            "        // Some possible usages:",
            "        // - Service callback/telemetry indicating that extension was reinstalled",
            "    end;",
            "}"
        ],
        "description": "Install Codeunit (TNC)"
    },
    "Upgrade Codeunit": {
        "scope": "al",
        "prefix": "tupgradecodeunit (TNC)",
        "body": [
            "codeunit ${1:50099} Upgrade${2:Ext}",
            "{",
            "    Subtype = Upgrade;",
            "",
            "    var",
            "        AppInfo: ModuleInfo;",
            "        AppInfoDefined: Boolean;",
            "",
            "    trigger OnCheckPreconditionsPerCompany()",
            "    begin",
            "        // Code to check that certain company requirements are met in order to run the upgrade",
            "        case true of",
            "            // EXAMPLE:",
            "            // IsValidForVersion(Version.Create(0, 0, 0, 1)):",
            "            //     begin",
            "            //          List of procedures which is required to be executed for this version upgrade",
            "            //     end;",
            "        end;",
            "    end;",
            " ",
            "    trigger OnCheckPreconditionsPerDatabase()",
            "    begin",
            "        // Code to check that certain tenant requirements are met in order to run the upgrade",
            "        case true of",
            "            // EXAMPLE:",
            "            // IsValidForVersion(Version.Create(0, 0, 0, 1)):",
            "            //     begin",
            "            //          List of procedures which is required to be executed for this version upgrade",
            "            //     end;",
            "        end;",
            "    end;",
            " ",
            "    trigger OnUpgradePerCompany()",
            "    begin",
            "        // Code to perform company related table upgrade tasks",
            "        case true of",
            "            // EXAMPLE:",
            "            // IsValidForVersion(Version.Create(0, 0, 0, 1)):",
            "            //     begin",
            "            //         Example_PopulateNewField();",
            "            //         List of procedures which is required to be executed for this version upgrade",
            "            //     end;",
            "        end;",
            "    end;",
            " ",
            "    trigger OnUpgradePerDatabase()",
            "    begin",
            "        // Code to perform tenant related upgrade tasks",
            "        case true of",
            "            // EXAMPLE:",
            "            // IsValidForVersion(Version.Create(0, 0, 0, 1)):",
            "            //     begin",
            "            //          List of procedures which is required to be executed for this version upgrade",
            "            //     end;",
            "        end;",
            "    end;",
            " ",
            "    local procedure IsValidForVersion(Version: Version): Boolean",
            "    begin",
            "        if not AppInfoDefined then begin",
            "            NavApp.GetCurrentModuleInfo(AppInfo);",
            "            AppInfoDefined := true;",
            "        end;",
            "        exit(Version > AppInfo.DataVersion());",
            "    end;",
            "}"
        ],
        "description": "Upgrade Codeunit (TNC)"
    },
    "Test Codeunit": {
        "scope": "al",
        "prefix": "ttestcodeunit (TNC)",
        "body": [
            "codeunit ${1:50140} ${2}",
            "{",
            "    // [FEATURE] [${3}]",
            "",
            "    Subtype = Test;",
            "    TestPermissions = Disabled;",
            "",
            "    var",
            "        Assert: Codeunit Assert;",
            "        LibraryLowerPermissions: Codeunit \"Library - Lower Permissions\";",
            "        LibraryRandom: Codeunit \"Library - Random\";",
            "        LibraryUtility: Codeunit \"Library - Utility\";",
            "",
            "    ${0}",
            "}"
        ],
        "description": "Test Codeunit (TNC)"
    },
    "Download Artifact & Apply RapidStart": {
        "scope": "al",
        "prefix": "tapply (TNC)",
        "body": [
            "procedure DownloadAndApplyPackage(Name: Text; ShowConfiguration: Boolean): Boolean",
            "var",
            "    TempConfigSetup: Record \"Config. Setup\" temporary;",
            "    ConfigPackage: Record \"Config. Package\";",
            "    TempBlob: Codeunit \"Temp Blob\";",
            "    ConfigPackageImport: Codeunit \"Config. Package - Import\";",
            "    Selected: Integer;",
            "    FileNameTok: Label '%1.rapidstart', Comment = '%1 = Name', Locked = true;",
            "    StrMenuLbl: Label 'Review before applying,Apply without reviewing';",
            "    StrMenuInstrLbl: Label 'The ''%1'' configuration package is available to be imported. Please confirm how you would like to proceed:', Comment = '%1 = FileName';",
            "begin",
            "    if DownloadArtifactToBlob(StrSubstNo(FileNameTok, Name), TempBlob) then begin",
            "        Selected := 2;",
            "        if ShowConfiguration then",
            "            Selected := StrMenu(StrMenuLbl, 1, StrSubstNo(StrMenuInstrLbl, Name));",
            "        case Selected of",
            "            1:",
            "                begin",
            "                    ConfigPackageImport.ImportRapidStartPackageStream(TempBlob, TempConfigSetup);",
            "                    if ConfigPackage.Get(TempConfigSetup.\"Package Code\") then begin",
            "                        Page.Run(Page::\"Config. Package Card\", ConfigPackage);",
            "                        exit(true)",
            "                    end",
            "                end;",
            "            2:",
            "                begin",
            "                    ConfigPackageImport.ImportAndApplyRapidStartPackageStream(TempBlob);",
            "                    exit(true)",
            "                end;",
            "        end",
            "    end",
            "end;",
            "",
            "procedure DownloadArtifactToBlob(FileName: Text; var TempBlob: Codeunit \"Temp Blob\"): Boolean",
            "var",
            "    Instream: InStream;",
            "    Outstream: Outstream;",
            "begin",
            "    if DownloadArtifact(FileName, Instream) then begin",
            "        TempBlob.CreateOutStream(Outstream);",
            "        exit(CopyStream(Outstream, Instream))",
            "    end",
            "end;",
            "",
            "local procedure DownloadArtifact(FileName: Text; var Instream: InStream): Boolean",
            "var",
            "    HttpClient: HttpClient;",
            "    HttpResponseMessage: HttpResponseMessage;",
            "    CurrentModuleInfo: ModuleInfo;",
            "    UrlTok: Label 'https://api.365extensions.com/cdn/v1/%1/%2', Comment = '%1 - App ID, %2 - FileName', Locked = true;",
            "begin",
            "    if NavApp.GetCurrentModuleInfo(CurrentModuleInfo) then",
            "        if HttpClient.Get(StrSubstNo(UrlTok, CopyStr(Format(CurrentModuleInfo.Id(), 0, 4).ToLower(), 1, 36), FileName), HttpResponseMessage) then",
            "            if HttpResponseMessage.IsSuccessStatusCode() then",
            "                if HttpResponseMessage.Content.ReadAs(Instream) then",
            "                    exit(not Instream.EOS())",
            "end;"
        ],
        "description": "Download Artifact & Apply RapidStart (TNC)"
    },
    "Get Secret": {
        "scope": "al",
        "prefix": "tgetsecret (TNC)",
        "body": [
            "var",
            "   AppKeyVaultSecretProvider: Codeunit \"App Key Vault Secret Provider\";",
            "",
            "[NonDebuggable]",
            "internal procedure GetSecret(SecretName: Text) SecretValue: Text",
            "var",
            "    SecretNameTok: Label '${1:<AppAffix>}-%1', Comment = '%1 - SecretName', Locked = true;",
            "    FailedToRetrieveSecretErr: Label 'Failed to retrieve ''%1'' secret.', Comment = '%1 - Secret Name';",
            "begin",
            "    SecretName := StrSubstNo(SecretNameTok, SecretName);",
            "    if AppKeyVaultSecretProvider.TryInitializeFromCurrentApp() then",
            "        if AppKeyVaultSecretProvider.GetSecret(SecretName, SecretValue) then",
            "            exit;",
            "    Error(FailedToRetrieveSecretErr, SecretName)",
            "end;"
        ],
        "description": "Get Secret From Key Vault (TNC)"
    }
}
